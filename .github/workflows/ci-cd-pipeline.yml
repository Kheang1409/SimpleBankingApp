name: CI/CD Pipeline

on:
  push:
    branches:
      - production # Trigger on push to the production branch
  pull_request:
    branches:
      - production # Trigger on pull requests to the production branch

jobs:
  # Build and Test job
  build_and_test:
    runs-on: ubuntu-latest

    services:
      sql_server_container:
        image: mcr.microsoft.com/mssql/server
        options: --health-cmd="nc -z localhost 1433" --health-start-period=30s
        ports:
          - 1433:1433
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: Password_123#

      redis:
        image: redis
        ports:
          - 6379:6379

    steps:
      # Checkout the code from GitHub repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to DockerHub (if you need to push to DockerHub)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and run the containers using Docker Compose
      - name: Build and run docker-compose
        run: |
          docker-compose -f docker-compose.yml build
          docker-compose -f docker-compose.yml up -d

      # Wait for SQL Server to be ready
      - name: Wait for SQL Server to be ready
        run: |
          echo "Waiting for SQL Server to start..."
          docker exec -T sql_server_container /bin/bash -c "until nc -z localhost 1433; do sleep 5; done"

      # Run tests (if any tests are configured in your .NET app)
      - name: Run tests
        run: |
          docker exec mvcapp dotnet test

  # Deployment job (this step assumes you're deploying to a server or cloud provider)
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_test # Run only after successful build and tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to DockerHub (if you need to push to DockerHub)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push the docker image to DockerHub or deploy to your server
      - name: Push to DockerHub
        run: |
          docker-compose -f docker-compose.yml build
          docker-compose -f docker-compose.yml push

      # Optionally, deploy to a cloud platform or server
      - name: Deploy to production
        run: |
          # Your deployment commands go here (e.g., SSH to your server and pull the latest Docker image)
          echo "Deploying to production..."
